#include <iostream>
#include <random>
#include "Arvore.h"

using namespace std;

template <typename T>
List<T>* initializeList() 
{
    List<T>* list = (List<T>*) malloc(sizeof(List<T>));
    list->front = nullptr;
    list->rear = nullptr;
    
    return list;
}

template <typename T>
ListNode<T>* createListNode(NodeArvore<T>* data)
{
    ListNode<T>* temp = (ListNode<T>*) malloc(sizeof(ListNode<T>));
    temp->iPayload = data;
    temp->next = nullptr;
    
    return temp;
}

template <typename T>
void addElement(List<T>* list, NodeArvore<T>* node) 
{
    ListNode<T>* newNode = createListNode(node);
    
    if (list->rear != nullptr) 
    {
        list->rear->next = newNode;
    }
    list->rear = newNode;
    if (list->front == nullptr) 
    {
        list->front = newNode;
    }
}

template <typename T>
NodeArvore<T>* deleteElement(List<T>* list) 
{
    if (list->front == nullptr) 
    {
        return nullptr;
    }
    ListNode<T>* temp = list->front;
    NodeArvore<T>* node = temp->iPayload;
    list->front = list->front->next;
    if (list->front == nullptr) 
    {
        list->rear = nullptr;
    }
    free(temp);
    return node;
}

template <typename T>
NodeArvore<T>* bfs(NodeArvore<T>* startingNode, T iValue) 
{
    if (startingNode == nullptr) 
    {
        return nullptr;
    }

    List<int>* list = initializeList<int>();
    addElement(list, startingNode);

    while (list->front != nullptr) 
    {
        NodeArvore<T>* currentNode = deleteElement(list);
        if (currentNode->iPayload == iValue)
        {
            return currentNode;
        }

        if (currentNode->ptrLeft != nullptr) 
        {
            addElement(list, currentNode->ptrLeft);
        }

        if (currentNode->ptrRight != nullptr) 
        {
            addElement(list, currentNode->ptrRight);
        }
    }

    return nullptr;
}